/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.google.BlockToBq.Generated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BitcoinTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6301254621057491540L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BitcoinTransaction\",\"namespace\":\"com.google.BlockToBq.Generated\",\"fields\":[{\"name\":\"transaction_id\",\"type\":\"string\"},{\"name\":\"block\",\"type\":{\"type\":\"record\",\"name\":\"BitcoinBlock\",\"fields\":[{\"name\":\"block_id\",\"type\":\"string\"},{\"name\":\"previous_block\",\"type\":\"string\"},{\"name\":\"merkle_root\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"difficulty\",\"type\":\"long\"},{\"name\":\"nonce\",\"type\":\"long\"},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"work\",\"type\":\"long\"}]}},{\"name\":\"inputs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BitcoinInput\",\"fields\":[{\"name\":\"script_bytes\",\"type\":\"bytes\"},{\"name\":\"script_string\",\"type\":\"string\"},{\"name\":\"sequence_number\",\"type\":\"long\"},{\"name\":\"pubkey\",\"type\":\"string\"}]}}},{\"name\":\"outputs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BitcoinOutput\",\"fields\":[{\"name\":\"satoshis\",\"type\":\"long\"},{\"name\":\"script_bytes\",\"type\":\"bytes\"},{\"name\":\"script_string\",\"type\":\"string\"},{\"name\":\"pubkey\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BitcoinTransaction> ENCODER =
      new BinaryMessageEncoder<BitcoinTransaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BitcoinTransaction> DECODER =
      new BinaryMessageDecoder<BitcoinTransaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BitcoinTransaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BitcoinTransaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BitcoinTransaction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BitcoinTransaction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BitcoinTransaction from a ByteBuffer. */
  public static BitcoinTransaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence transaction_id;
  @Deprecated public com.google.BlockToBq.Generated.BitcoinBlock block;
  @Deprecated public java.util.List<com.google.BlockToBq.Generated.BitcoinInput> inputs;
  @Deprecated public java.util.List<com.google.BlockToBq.Generated.BitcoinOutput> outputs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BitcoinTransaction() {}

  /**
   * All-args constructor.
   * @param transaction_id The new value for transaction_id
   * @param block The new value for block
   * @param inputs The new value for inputs
   * @param outputs The new value for outputs
   */
  public BitcoinTransaction(java.lang.CharSequence transaction_id, com.google.BlockToBq.Generated.BitcoinBlock block, java.util.List<com.google.BlockToBq.Generated.BitcoinInput> inputs, java.util.List<com.google.BlockToBq.Generated.BitcoinOutput> outputs) {
    this.transaction_id = transaction_id;
    this.block = block;
    this.inputs = inputs;
    this.outputs = outputs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transaction_id;
    case 1: return block;
    case 2: return inputs;
    case 3: return outputs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transaction_id = (java.lang.CharSequence)value$; break;
    case 1: block = (com.google.BlockToBq.Generated.BitcoinBlock)value$; break;
    case 2: inputs = (java.util.List<com.google.BlockToBq.Generated.BitcoinInput>)value$; break;
    case 3: outputs = (java.util.List<com.google.BlockToBq.Generated.BitcoinOutput>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transaction_id' field.
   * @return The value of the 'transaction_id' field.
   */
  public java.lang.CharSequence getTransactionId() {
    return transaction_id;
  }

  /**
   * Sets the value of the 'transaction_id' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.CharSequence value) {
    this.transaction_id = value;
  }

  /**
   * Gets the value of the 'block' field.
   * @return The value of the 'block' field.
   */
  public com.google.BlockToBq.Generated.BitcoinBlock getBlock() {
    return block;
  }

  /**
   * Sets the value of the 'block' field.
   * @param value the value to set.
   */
  public void setBlock(com.google.BlockToBq.Generated.BitcoinBlock value) {
    this.block = value;
  }

  /**
   * Gets the value of the 'inputs' field.
   * @return The value of the 'inputs' field.
   */
  public java.util.List<com.google.BlockToBq.Generated.BitcoinInput> getInputs() {
    return inputs;
  }

  /**
   * Sets the value of the 'inputs' field.
   * @param value the value to set.
   */
  public void setInputs(java.util.List<com.google.BlockToBq.Generated.BitcoinInput> value) {
    this.inputs = value;
  }

  /**
   * Gets the value of the 'outputs' field.
   * @return The value of the 'outputs' field.
   */
  public java.util.List<com.google.BlockToBq.Generated.BitcoinOutput> getOutputs() {
    return outputs;
  }

  /**
   * Sets the value of the 'outputs' field.
   * @param value the value to set.
   */
  public void setOutputs(java.util.List<com.google.BlockToBq.Generated.BitcoinOutput> value) {
    this.outputs = value;
  }

  /**
   * Creates a new BitcoinTransaction RecordBuilder.
   * @return A new BitcoinTransaction RecordBuilder
   */
  public static com.google.BlockToBq.Generated.BitcoinTransaction.Builder newBuilder() {
    return new com.google.BlockToBq.Generated.BitcoinTransaction.Builder();
  }

  /**
   * Creates a new BitcoinTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BitcoinTransaction RecordBuilder
   */
  public static com.google.BlockToBq.Generated.BitcoinTransaction.Builder newBuilder(com.google.BlockToBq.Generated.BitcoinTransaction.Builder other) {
    return new com.google.BlockToBq.Generated.BitcoinTransaction.Builder(other);
  }

  /**
   * Creates a new BitcoinTransaction RecordBuilder by copying an existing BitcoinTransaction instance.
   * @param other The existing instance to copy.
   * @return A new BitcoinTransaction RecordBuilder
   */
  public static com.google.BlockToBq.Generated.BitcoinTransaction.Builder newBuilder(com.google.BlockToBq.Generated.BitcoinTransaction other) {
    return new com.google.BlockToBq.Generated.BitcoinTransaction.Builder(other);
  }

  /**
   * RecordBuilder for BitcoinTransaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BitcoinTransaction>
    implements org.apache.avro.data.RecordBuilder<BitcoinTransaction> {

    private java.lang.CharSequence transaction_id;
    private com.google.BlockToBq.Generated.BitcoinBlock block;
    private com.google.BlockToBq.Generated.BitcoinBlock.Builder blockBuilder;
    private java.util.List<com.google.BlockToBq.Generated.BitcoinInput> inputs;
    private java.util.List<com.google.BlockToBq.Generated.BitcoinOutput> outputs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.google.BlockToBq.Generated.BitcoinTransaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.block)) {
        this.block = data().deepCopy(fields()[1].schema(), other.block);
        fieldSetFlags()[1] = true;
      }
      if (other.hasBlockBuilder()) {
        this.blockBuilder = com.google.BlockToBq.Generated.BitcoinBlock.newBuilder(other.getBlockBuilder());
      }
      if (isValidValue(fields()[2], other.inputs)) {
        this.inputs = data().deepCopy(fields()[2].schema(), other.inputs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.outputs)) {
        this.outputs = data().deepCopy(fields()[3].schema(), other.outputs);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BitcoinTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.google.BlockToBq.Generated.BitcoinTransaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.block)) {
        this.block = data().deepCopy(fields()[1].schema(), other.block);
        fieldSetFlags()[1] = true;
      }
      this.blockBuilder = null;
      if (isValidValue(fields()[2], other.inputs)) {
        this.inputs = data().deepCopy(fields()[2].schema(), other.inputs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.outputs)) {
        this.outputs = data().deepCopy(fields()[3].schema(), other.outputs);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'transaction_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionId() {
      return transaction_id;
    }

    /**
      * Sets the value of the 'transaction_id' field.
      * @param value The value of 'transaction_id'.
      * @return This builder.
      */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder setTransactionId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transaction_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_id' field has been set.
      * @return True if the 'transaction_id' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transaction_id' field.
      * @return This builder.
      */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder clearTransactionId() {
      transaction_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'block' field.
      * @return The value.
      */
    public com.google.BlockToBq.Generated.BitcoinBlock getBlock() {
      return block;
    }

    /**
      * Sets the value of the 'block' field.
      * @param value The value of 'block'.
      * @return This builder.
      */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder setBlock(com.google.BlockToBq.Generated.BitcoinBlock value) {
      validate(fields()[1], value);
      this.blockBuilder = null;
      this.block = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'block' field has been set.
      * @return True if the 'block' field has been set, false otherwise.
      */
    public boolean hasBlock() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'block' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.google.BlockToBq.Generated.BitcoinBlock.Builder getBlockBuilder() {
      if (blockBuilder == null) {
        if (hasBlock()) {
          setBlockBuilder(com.google.BlockToBq.Generated.BitcoinBlock.newBuilder(block));
        } else {
          setBlockBuilder(com.google.BlockToBq.Generated.BitcoinBlock.newBuilder());
        }
      }
      return blockBuilder;
    }

    /**
     * Sets the Builder instance for the 'block' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder setBlockBuilder(com.google.BlockToBq.Generated.BitcoinBlock.Builder value) {
      clearBlock();
      blockBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'block' field has an active Builder instance
     * @return True if the 'block' field has an active Builder instance
     */
    public boolean hasBlockBuilder() {
      return blockBuilder != null;
    }

    /**
      * Clears the value of the 'block' field.
      * @return This builder.
      */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder clearBlock() {
      block = null;
      blockBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'inputs' field.
      * @return The value.
      */
    public java.util.List<com.google.BlockToBq.Generated.BitcoinInput> getInputs() {
      return inputs;
    }

    /**
      * Sets the value of the 'inputs' field.
      * @param value The value of 'inputs'.
      * @return This builder.
      */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder setInputs(java.util.List<com.google.BlockToBq.Generated.BitcoinInput> value) {
      validate(fields()[2], value);
      this.inputs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'inputs' field has been set.
      * @return True if the 'inputs' field has been set, false otherwise.
      */
    public boolean hasInputs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'inputs' field.
      * @return This builder.
      */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder clearInputs() {
      inputs = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'outputs' field.
      * @return The value.
      */
    public java.util.List<com.google.BlockToBq.Generated.BitcoinOutput> getOutputs() {
      return outputs;
    }

    /**
      * Sets the value of the 'outputs' field.
      * @param value The value of 'outputs'.
      * @return This builder.
      */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder setOutputs(java.util.List<com.google.BlockToBq.Generated.BitcoinOutput> value) {
      validate(fields()[3], value);
      this.outputs = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'outputs' field has been set.
      * @return True if the 'outputs' field has been set, false otherwise.
      */
    public boolean hasOutputs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'outputs' field.
      * @return This builder.
      */
    public com.google.BlockToBq.Generated.BitcoinTransaction.Builder clearOutputs() {
      outputs = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BitcoinTransaction build() {
      try {
        BitcoinTransaction record = new BitcoinTransaction();
        record.transaction_id = fieldSetFlags()[0] ? this.transaction_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (blockBuilder != null) {
          record.block = this.blockBuilder.build();
        } else {
          record.block = fieldSetFlags()[1] ? this.block : (com.google.BlockToBq.Generated.BitcoinBlock) defaultValue(fields()[1]);
        }
        record.inputs = fieldSetFlags()[2] ? this.inputs : (java.util.List<com.google.BlockToBq.Generated.BitcoinInput>) defaultValue(fields()[2]);
        record.outputs = fieldSetFlags()[3] ? this.outputs : (java.util.List<com.google.BlockToBq.Generated.BitcoinOutput>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BitcoinTransaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<BitcoinTransaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BitcoinTransaction>
    READER$ = (org.apache.avro.io.DatumReader<BitcoinTransaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
